The first thing we'll need to do is load in the libraries and datasets we'll be using.

# modules we'll use
import pandas as pd
import numpy as np
# read in all our data
df=pd.read_csv('/content/NFL Play by Play 2009-2016 (v3).csv')

# set seed for reproducibility
np.random.seed(0) 

The first thing I do when I get a new dataset is take a look at some of it. This lets me see that it all read in correctly and get an idea of what's going on with the data. In this case, I'm looking to see if I see any missing values, which will be reprsented with NaN or None

# look at a few rows of the nfl_data file. I can see a handful of missing data already!
df.sample(5)


See how many missing data points we have
Ok, now we know that we do have some missing values. Let's see how many we have in each column.

# get the number of missing data points per column
missing_values_count = df.isnull().sum()

# look at the # of missing points in the first ten columns
missing_values_count[0:10]

That seems like a lot! It might be helpful to see what percentage of the values in our dataset were missing to give us a better sense of the scale of this problem:

# how many total missing values do we have?
total_cells = np.product(df.shape)
total_missing = missing_values_count.sum()

# percent of data that is missing
(total_missing/total_cells) * 100


Wow, almost a quarter of the cells in this dataset are empty! In the next step, we're going to take a closer look at some of the columns with missing values and try to figure out what might be going on with them.


Let's work through an example. Looking at the number of missing values in the nfl dataframe, I notice that the column TimesSec has a lot of missing values in it:

# look at the # of missing points in the first ten columns
missing_values_count[0:10]

Drop missing values
If you're in a hurry or don't have a reason to figure out why your values are missing, one option you have is to just remove any rows or columns that contain missing values. (Note: I don't generally recommend this approch for important projects! It's usually worth it to take the time to go through your data and really look at all the columns with missing values one-by-one to really get to know your dataset.)

If you're sure you want to drop rows with missing values, pandas does have a handy function, dropna() to help you do this. Let's try it out on our NFL dataset!

# remove all the rows that contain a missing value
df.dropna()

it looks like that's removed all our data! This is because every row in our dataset had at least one missing value. We might have better luck removing all the columns that have at least one missing value instead.

# remove all columns with at least one missing value
columns_with_na_dropped = df.dropna(axis=1)
columns_with_na_dropped.head()

# just how much data did we lose?
print("Columns in original dataset: %d \n" % df.shape[1])
print("Columns with na's dropped: %d" % columns_with_na_dropped.shape[1])

Columns in original dataset: 102 

Columns with na's dropped: 41

We've lost quite a bit of data, but at this point we have successfully removed all the NaN's from our data.

**Filling in missing values automatically**
Another option is to try and fill in the missing values. For this next bit, I'm getting a small sub-section of the NFL data so that it will print well.

 #get a small subset of the NFL dataset
df1 = df.loc[:, 'EPA':'Season'].head()
df1

We can use the Panda's fillna() function to fill in missing values in a dataframe for us. One option we have is to specify what we want the NaN values to be replaced with. Here, I'm saying that I would like to replace all the NaN values with 0.

# replace all NA's with 0
df1.fillna(0)


I could also be a bit more savvy and replace missing values with whatever value comes directly after it in the same column. (This makes a lot of sense for datasets where the observations have some sort of logical order to them.)

# replace all NA's the value that comes directly after it in the same column, 
# then replace all the reamining na's with 0
df1.fillna(method = 'bfill', axis=0).fillna(0)





